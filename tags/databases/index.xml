<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Databases | Suhail Najeeb</title>
    <link>https://suhailnajeeb.github.io/tags/databases/</link>
      <atom:link href="https://suhailnajeeb.github.io/tags/databases/index.xml" rel="self" type="application/rss+xml" />
    <description>Databases</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sat, 25 Apr 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=false) shape:circle]</url>
      <title>Databases</title>
      <link>https://suhailnajeeb.github.io/tags/databases/</link>
    </image>
    
    <item>
      <title>SQL Fundamentals (Part 3/3)</title>
      <link>https://suhailnajeeb.github.io/post/sql-fundamentals-part-3/</link>
      <pubDate>Sat, 25 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://suhailnajeeb.github.io/post/sql-fundamentals-part-3/</guid>
      <description>&lt;figure&gt;
    &lt;img src=&#34;https://suhailnajeeb.github.io/img/sql/database.jpg&#34;&gt;
    &lt;a href = &#34;https://www.pexels.com/photo/bandwidth-close-up-computer-connection-1148820/&#34; target = &#34;_blank&#34;&gt;
    &lt;figcaption&gt;Photo by Panumas Nikhomkhai from Pexels&lt;/figcaption&gt;
    &lt;/a&gt;
&lt;/figure&gt;
&lt;hr&gt;
&lt;p&gt;This is the Part 3 of my SQL Fundamentals series, continuing from 
&lt;a href=&#34;https://suhailnajeeb.github.io/post/sql-fundamentals-part-2&#34;&gt;Part 2&lt;/a&gt; where I discussed about matching string patterns, Ranges, Sets, Sorting, Grouping, Filtering etc. Part 3 of this series covers the following topics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Functions in SQL:
&lt;ul&gt;
&lt;li&gt;Aggregate/Column Functions: SUM, MIN, MAX, AVG&lt;/li&gt;
&lt;li&gt;Scalar and String Functinos: ROUND, LENGTH, UCASE, DCASE&lt;/li&gt;
&lt;li&gt;Date-Time Functions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sub-Queries and Nested Selects&lt;/li&gt;
&lt;li&gt;Working with Multiple Tables etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following statemetns aren&amp;rsquo;t really descriptive if that is something you are looking for. Its mostly a collection of the basic syntaxes with some examples. This is the 
&lt;a href=&#34;https://github.com/suhailnajeeb/learning-sql&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;link&lt;/a&gt; to the corresponding github repository. You will find some relevant example sql queries in the 
&lt;a href=&#34;https://github.com/suhailnajeeb/learning-sql/tree/master/problems&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Problems&lt;/a&gt; folder of the repository.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;functions-in-sql&#34;&gt;Functions in SQL:&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Built-in Functions&lt;/li&gt;
&lt;li&gt;User Defined Functions&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;aggregate-or-column-functions&#34;&gt;Aggregate or Column Functions&lt;/h1&gt;
&lt;h2 id=&#34;sum-function&#34;&gt;Sum Function:&lt;/h2&gt;
&lt;p&gt;Add up all values in a column&lt;/p&gt;
&lt;h2 id=&#34;syntax&#34;&gt;Syntax:&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SUM(COLUMN_NAME)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;examples&#34;&gt;Examples:&lt;/h2&gt;
&lt;p&gt;Add all values in the SALEPRICE column&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select SUM(SALEPRICE) from PETSALE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Explicitly name the output column SUM_OF_SALEPRICE&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select SUM(SALEPRICE) as SUM_OF_SALEPRICE
    from PETSALE
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;min-max-avg&#34;&gt;MIN, MAX, AVG&lt;/h1&gt;
&lt;h2 id=&#34;min-returns-the-minimum-value&#34;&gt;Min: Returns the minimum value&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select MIN(ID) from PETSALE where ANIMAL = &#39;Dog&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;max-returns-the-maximum-value&#34;&gt;Max: Returns the maximum value&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select MAX(QUANTITY) from PETSALE
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;average-return-the-average-value&#34;&gt;Average: Return the average value&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select AVG(SALEPRICE) from PETSALE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mathematical operations can be performed between columns&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select AVG(SALEPRICE / QUANTITY) from PETSALE
    where ANIMAL = &#39;Dog&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;scaler-and-string-functions&#34;&gt;Scaler and String Functions&lt;/h1&gt;
&lt;h2 id=&#34;round&#34;&gt;ROUND()&lt;/h2&gt;
&lt;p&gt;Round up or down every value in saleprice:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select ROUND(SALEPRICE) from PETSALE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Retrieve the length of each value in ANIMAL:&lt;/p&gt;
&lt;h2 id=&#34;length&#34;&gt;LENGTH()&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select LENGTH(ANIMAL) from PETSALE
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;ucase&#34;&gt;UCASE&lt;/h2&gt;
&lt;p&gt;Retrieve ANIMAL values in Uppercase:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select UCASE(ANIMAL) from PETSALE
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;dcase&#34;&gt;DCASE&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select * from PETSALE
    where LCASE(ANIMAL) = &#39;cat&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;select distinct values:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select DISTINCT(UCASE(ANIMAL)) from PETSALE
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;date-time-functions&#34;&gt;Date, Time Functions&lt;/h1&gt;
&lt;h2 id=&#34;examples-1&#34;&gt;Examples:&lt;/h2&gt;
&lt;p&gt;Extract the DAY portion from a date:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select DAY(SALEDATE) from PETSALE
    where ANIMAL = &#39;Cat&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Get the number of sales during the month of May:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select COUNT(*) from PETSALE
    where MONTH(SALEDATE) = &#39;05&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;datetime-arithmetic&#34;&gt;Date/Time Arithmetic:&lt;/h2&gt;
&lt;p&gt;What date is it 3 days after each sale date?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select (SALEDATE + 3 DAYS) from PETSALE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Special Registers:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CURRENT_DATE, CURRENT_TIME
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Find how many days have passed since each SALEDATE till now:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select (CURRENT_DATE - SALEDATE) from PETSALE
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;sub-queries-and-nested-selects&#34;&gt;Sub-Queries and Nested Selects:&lt;/h1&gt;
&lt;h2 id=&#34;sub-query&#34;&gt;Sub-Query:&lt;/h2&gt;
&lt;p&gt;A Query inside another Query&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select COLUMN1 from TABLE
    where COLUMN2 = (select MAX(COLUMN2) from TABLE)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;example&#34;&gt;Example:&lt;/h2&gt;
&lt;p&gt;Retrieve the list of employees who earn more than the average salary:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;THIS IS INCORRECT&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select * from employees
    where salary &amp;gt; AVG(salary)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;You cannot aggregate functions like AVG() in the WHERE clause&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Solution&lt;/em&gt;: Use a sub-select expression.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select EMP_ID, F_NAME, L_NAME, SALARY
    from employees
    where salary &amp;gt;
    (select AVG(SALARY) from employees);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;sub-queries-in-list-of-columns&#34;&gt;Sub-Queries in list of columns&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Substitute column name with a sub-query&lt;/li&gt;
&lt;li&gt;Called Column Expressions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;THIS IS INCORRECT&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select EMP_ID, SALARY, AVG(SALARY) AS AVG_SALARY
    from employees;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select EMP_ID, SALARY,
    ( select AVG(SALARY) from employees)
        AS AVG_SALARY
    from employees;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;sub-queries-in-from-clause&#34;&gt;Sub-queries in FROM Clause&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Substitute the TABLE name with a sub-query&lt;/li&gt;
&lt;li&gt;These are called Derived Tables or Table Expressions&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select * from
    ( select EMP_ID, F_NAME, L_NAME, DEP_ID
        from employees) AS EMP4ALL;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;working-with-multiple-tables&#34;&gt;Working With Multiple Tables:&lt;/h1&gt;
&lt;p&gt;Ways to access multiple tables in the same query:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Sub-queries&lt;/li&gt;
&lt;li&gt;Implicit JOIN&lt;/li&gt;
&lt;li&gt;JOIN operators (INNER JOIN, OUTER JOIN, etc.)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;accessing-multiple-tables-with-sub-queries&#34;&gt;Accessing Multiple Tables with Sub-queries:&lt;/h2&gt;
&lt;p&gt;Retrieve only the employee recrds that correspond to departmetns in the DEPARTMENTS table:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select * from employees
    where DEP_ID IN
        (select DEPT_ID_DEP from departments);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Retrieve only the list of employees from a specific location:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EMPLOYEES table does not contain location information&lt;/li&gt;
&lt;li&gt;Need to get location info from DEPARTMENTS table&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select * from employees
    where DEP_ID_IN
        (select DEPT_ID_DEP from departments
            where LOC_ID = &#39;L0002&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Retreive department ID and name for employees who earn more than $70,000&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select DEPT_ID_DEP, DEP_NAME from departments
    where DEPT_ID_DEP IN
        (select DEP_ID from employees
            wehre SALARY &amp;gt; 70000)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;accessing-multiple-tables-with-implicit-join&#34;&gt;Accessing Multiple Tables with Implicit Join:&lt;/h2&gt;
&lt;p&gt;Specify 2 Tables in the FROM clause:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select * from employees, departments;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The result is a full join (Cartesian Join)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Every row in the first table is joined with every row in the 2nd table&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Limiting the result set:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select * from employees, departments
    where employees.DEP_ID = 
        departments.DEPT_ID_DEP;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using shorter aliases for table names:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select * from employees E, departments D
    where E.DEP_ID = D.DEPT_ID_DEP;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See the department name for each employee:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select employees.EMP_ID, departments.DEPT_NAME
    from employees E, departments D
    where E.DEP_ID = D.DEPT_ID_DEP;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Column names can be pre-fixed by aliases also:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select E.EMP_ID, D.DEPT_NAME
    from employees E, departments D
    where E.DEP_ID = D.DEPT_ID_DEP;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can find some relevant SQL queries 
&lt;a href=&#34;https://github.com/suhailnajeeb/learning-sql/blob/master/problems/problemset_2.sql&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://suhailnajeeb.github.io/post/sql-fundamentals-part-1&#34;&gt;Link&lt;/a&gt; to &lt;strong&gt;Part 1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://suhailnajeeb.github.io/post/sql-fundamentals-part-2&#34;&gt;Link&lt;/a&gt; to &lt;strong&gt;Part 2&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;This post ends this SQL Fundamentals series. I hope that you have found it helpful. Thank you for sticking till the end!&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SQL Fundamentals (Part 2/3)</title>
      <link>https://suhailnajeeb.github.io/post/sql-fundamentals-part-2/</link>
      <pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://suhailnajeeb.github.io/post/sql-fundamentals-part-2/</guid>
      <description>&lt;figure&gt;
    &lt;img src=&#34;https://suhailnajeeb.github.io/img/sql/database.jpg&#34;&gt;
    &lt;a href = &#34;https://www.pexels.com/photo/bandwidth-close-up-computer-connection-1148820/&#34; target = &#34;_blank&#34;&gt;
    &lt;figcaption&gt;Photo by Panumas Nikhomkhai from Pexels&lt;/figcaption&gt;
    &lt;/a&gt;
&lt;/figure&gt;
&lt;hr&gt;
&lt;p&gt;This is the Part 2 of my SQL Fundamentals series, continuing from 
&lt;a href=&#34;https://suhailnajeeb.github.io/post/sql-fundamentals-part-1&#34;&gt;Part 1&lt;/a&gt; where I discussed Creating Tables, Querying with SELECT and WHERE, introduced some useful functions like COUNT, DISTINCT, LIMIT and some DML statements - INSERT, UPDATE, DELETE Etc. Part 2 of this series covers the following topics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Matching String Patterns&lt;/li&gt;
&lt;li&gt;Ranges&lt;/li&gt;
&lt;li&gt;Sets&lt;/li&gt;
&lt;li&gt;Sorting&lt;/li&gt;
&lt;li&gt;Eliminating Duplicates&lt;/li&gt;
&lt;li&gt;Grouping, Counting&lt;/li&gt;
&lt;li&gt;Filtering Grouped results.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following statemetns aren&amp;rsquo;t really descriptive if that is something you are looking for. Its mostly a collection of the basic syntaxes with some examples. This is the 
&lt;a href=&#34;https://github.com/suhailnajeeb/learning-sql&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;link&lt;/a&gt; to the corresponding github repository. You will find some relevant example sql queries in the 
&lt;a href=&#34;https://github.com/suhailnajeeb/learning-sql/tree/master/problems&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Problems&lt;/a&gt; folder of the repository.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;string-patterns&#34;&gt;String Patterns&lt;/h1&gt;
&lt;h2 id=&#34;matching-string&#34;&gt;Matching string:&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select book_id, title from book
    where book_id = &#39;B1&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;looking-for-string-patterns&#34;&gt;Looking for String Patterns:&lt;/h2&gt;
&lt;p&gt;Display all authors with firstname starting with R&lt;br&gt;
&lt;strong&gt;Predicate:&lt;/strong&gt; Like&lt;br&gt;
&lt;strong&gt;Wildcard:&lt;/strong&gt; %&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select firstname from author
    where firstname like &#39;R%&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;ranges&#34;&gt;Ranges:&lt;/h1&gt;
&lt;h2 id=&#34;without-range&#34;&gt;Without Range:&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select title, pages from book
    where pages &amp;gt;= 290 and pages &amp;lt;= 300;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;retrieving-values-using-range&#34;&gt;Retrieving values using Range:&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select title, pages from book
    where pages between 290 and 300;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;sets&#34;&gt;Sets&lt;/h1&gt;
&lt;h2 id=&#34;without-set-of-values&#34;&gt;Without set of values:&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select firstname, lastname, country from author
    where country = &#39;AU&#39; or country = &#39;BR&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;retrieving-rows-using-a-set-of-values&#34;&gt;Retrieving rows using a set of values:&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select firstname, lastname, country from author
    where country in (&#39;AU&#39;, &#39;BR&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;sorting-result-sets&#34;&gt;Sorting Result Sets:&lt;/h1&gt;
&lt;h2 id=&#34;order-by-title-ascending-order&#34;&gt;Order by title (Ascending Order):&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select title from book
    order by title;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;order-by-title-descending-order&#34;&gt;Order by title (Descending Order):&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select title from book
    order by title desc;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;order-by-specifying-the-column-number&#34;&gt;Order by specifying the column number:&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select title, pages from book
    order by 2;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;distinct-clause-eliminating-duplicates&#34;&gt;Distinct Clause: (Eliminating Duplicates)&lt;/h2&gt;
&lt;p&gt;List the unique countries:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select distinct(country) from author
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;count&#34;&gt;Count:&lt;/h1&gt;
&lt;p&gt;Counting the number of countries:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select country, count(country) from author
    group by country
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Counting the number of countries and giving the count column a name:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select country, count(country) as count
    from author
    group by country
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;having-clause&#34;&gt;Having Clause:&lt;/h2&gt;
&lt;p&gt;Restricting the result set using &lt;strong&gt;having&lt;/strong&gt; clause.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Having clause is used with group-by clause only&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select country, count(country) as count
    from author
    group by country
    having count(country) &amp;gt; 4
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;You can find some relevant SQL queries 
&lt;a href=&#34;https://github.com/suhailnajeeb/learning-sql/blob/master/problems/problemset_2.sql&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://suhailnajeeb.github.io/post/sql-fundamentals-part-1&#34;&gt;Link&lt;/a&gt; to &lt;strong&gt;Part 1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://suhailnajeeb.github.io/post/sql-fundamentals-part-3&#34;&gt;Link&lt;/a&gt; to &lt;strong&gt;Part 3&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;To be continued ..&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SQL Fundamentals (Part 1/3)</title>
      <link>https://suhailnajeeb.github.io/post/sql-fundamentals-part-1/</link>
      <pubDate>Thu, 16 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://suhailnajeeb.github.io/post/sql-fundamentals-part-1/</guid>
      <description>&lt;figure&gt;
    &lt;img src=&#34;https://suhailnajeeb.github.io/img/sql/database.jpg&#34;&gt;
    &lt;a href = &#34;https://www.pexels.com/photo/bandwidth-close-up-computer-connection-1148820/&#34; target = &#34;_blank&#34;&gt;
    &lt;figcaption&gt;Photo by Panumas Nikhomkhai from Pexels&lt;/figcaption&gt;
    &lt;/a&gt;
&lt;/figure&gt;
&lt;hr&gt;
&lt;p&gt;While recently learning the basics of SQL, I created a bunch of notes for reference. You will find that these notes are parallel to the following online courses:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://cognitiveclass.ai/courses/learn-sql-relational-databases&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SQL and Relational Databases 101&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.coursera.org/learn/sql-data-science&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Databases and SQL for Data Science&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The course on 
&lt;a href=&#34;https://cognitiveclass.ai&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cognitiveclass.ai&lt;/a&gt; is free and  you could follow the materials if you want. SQL for Data Science course is part of coursera&amp;rsquo;s

&lt;a href=&#34;https://www.coursera.org/professional-certificates/ibm-data-science&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;IBM Data Science Professional Certificate&lt;/a&gt; Program and provides a brief introduction to SQL for data science.&lt;/p&gt;
&lt;h2 id=&#34;the-following-statemetns-arent-really-descriptive-if-that-is-something-you-are-looking-for-its-mostly-a-collection-of-the-basic-syntaxes-with-some-examples-this-is-the-linkhttpsgithubcomsuhailnajeeblearning-sql-to-the-corresponding-github-repository-you-will-find-some-relevant-example-sql-queries-in-the-problemshttpsgithubcomsuhailnajeeblearning-sqltreemasterproblems-folder-of-the-repository&#34;&gt;The following statemetns aren&amp;rsquo;t really descriptive if that is something you are looking for. Its mostly a collection of the basic syntaxes with some examples. This is the 
&lt;a href=&#34;https://github.com/suhailnajeeb/learning-sql&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;link&lt;/a&gt; to the corresponding github repository. You will find some relevant example sql queries in the 
&lt;a href=&#34;https://github.com/suhailnajeeb/learning-sql/tree/master/problems&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Problems&lt;/a&gt; folder of the repository.&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Part 1&lt;/strong&gt; contains a summary of the following topics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Creating Tables:
&lt;ul&gt;
&lt;li&gt;CREATE&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Queries:
&lt;ul&gt;
&lt;li&gt;SELECT&lt;/li&gt;
&lt;li&gt;WHERE&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Useful functions for query:
&lt;ul&gt;
&lt;li&gt;COUNT&lt;/li&gt;
&lt;li&gt;DISTINCT&lt;/li&gt;
&lt;li&gt;LIMIT&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DML Statements:
&lt;ul&gt;
&lt;li&gt;INSERT&lt;/li&gt;
&lt;li&gt;UPDATE&lt;/li&gt;
&lt;li&gt;DELETE&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;5-basic-sql-commands&#34;&gt;5 Basic SQL Commands:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Create&lt;/li&gt;
&lt;li&gt;Insert&lt;/li&gt;
&lt;li&gt;Select&lt;/li&gt;
&lt;li&gt;Update&lt;/li&gt;
&lt;li&gt;Delete&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;these-commands-are-divided-into-2-types&#34;&gt;These commands are divided into 2 types:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;DDL Statements (Data Definition Language)
&lt;ul&gt;
&lt;li&gt;Define, Change or Drop Data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DML Statements (Data Manipulation Language)
&lt;ul&gt;
&lt;li&gt;Read and Modify Data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;creating-tables&#34;&gt;Creating Tables:&lt;/h1&gt;
&lt;h2 id=&#34;syntax&#34;&gt;Syntax:&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;create table TABLENAME (
    COLUMN1 datatype,
    COLUMN2 datatype,
    COLUMN3 datatype,
        ...
    ) ;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;examples&#34;&gt;Examples:&lt;/h2&gt;
&lt;p&gt;Varchar - Variable Character&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;create table TEST (
    ID integer,
    NAME varchar(30)
    );
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Char-Fixed Character&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;create table COUNTRY (
    ID int,
    CCODE char(2),
    NAME varchar(60)
    );
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Setting the Primary Key to ID&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;create table COUNTRY (
    ID int NOT NULL,
    CCODE char(2),
    NAME varchar(60),
    PRIMARY KEY (ID)
    );
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Droping and creating table:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;drop table COUNTRY;
create table COUNTRY (
    ID integer PRIMARY KEY NOT NULL,
    CCODE char(2),
    NAME varchar(60)
    );
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;select-statement&#34;&gt;Select Statement:&lt;/h1&gt;
&lt;p&gt;Used for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Retreiving Data from the Table.&lt;/li&gt;
&lt;li&gt;This is a DML Statement&lt;/li&gt;
&lt;li&gt;Select Statement: Query&lt;/li&gt;
&lt;li&gt;Result of Select: Result Set/Table&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;syntax-1&#34;&gt;Syntax:&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select * from &amp;lt;tablename&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select COLUMN1, COLUMN2, ... from TABLE1;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;example&#34;&gt;Example:&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;select ID, NAME from COUNTRY;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Retrieve all columns:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select * from country;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;predicates&#34;&gt;Predicates:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Search conditions&lt;/li&gt;
&lt;li&gt;Used in the search condition for the WHERE clause&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;WHERE Clause comparison objects:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;=   Equal
&amp;gt;   Greater than
&amp;lt;   Less than
&amp;gt;=  Greater than or equal
&amp;lt;=  Less than or equal
&amp;lt;&amp;gt;  Not equal
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;examples-1&#34;&gt;Examples:&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select * from COUNTRY where ID &amp;lt;5;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select * from COUNTRY where CCODE = &#39;CA&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;count-function&#34;&gt;Count Function:&lt;/h1&gt;
&lt;p&gt;Built-in function that retrieves the number of rows matching the query criteria.&lt;/p&gt;
&lt;h2 id=&#34;examples-2&#34;&gt;Examples:&lt;/h2&gt;
&lt;p&gt;Number of rows in the table:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select COUNT(*) from tablename;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rows in MEDALS table where the country is Canada&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select COUNT(*) from MEDALS
    where COUNTRY = &#39;CANADA&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;distinct-function&#34;&gt;Distinct Function:&lt;/h1&gt;
&lt;p&gt;Used to Remove duplicate values in a result set.&lt;/p&gt;
&lt;h2 id=&#34;syntax-2&#34;&gt;Syntax:&lt;/h2&gt;
&lt;p&gt;Retrieve Unique values in a column:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select DISTINCT columnname from tablename
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;example-1&#34;&gt;Example:&lt;/h2&gt;
&lt;p&gt;List of unique Countries that received GOLD medals.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select DISTINCT COUNTRY from MEDALS
    where MEDALTYPE = &#39;GOLD&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;limit&#34;&gt;Limit:&lt;/h1&gt;
&lt;p&gt;Restrict the number of rows retrieved from the database.&lt;/p&gt;
&lt;h2 id=&#34;syntax-3&#34;&gt;Syntax:&lt;/h2&gt;
&lt;p&gt;Retrieve first 10 rows in a table:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select * from tablename LIMIT 10
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;example-2&#34;&gt;Example:&lt;/h2&gt;
&lt;p&gt;Retrieve 5 rows in the MEDALS table for the year 2018&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select * from MEDALS
    where YEAR = 2018 limit 5
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;insert-statement&#34;&gt;Insert Statement:&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Used for populating a table.&lt;/li&gt;
&lt;li&gt;DML Statement&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;syntax-4&#34;&gt;Syntax:&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;INSERT INTO tablename
    (Columnname,...,...)
    VALUES
    (Value,...,...,...)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;example-3&#34;&gt;Example:&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;INSERT INTO AUTHOR
    (AUTHOR_ID, LASTNAME, FIRSTNAME, EMAIL, CITY, COUNTRY)
    VALUES
    (&#39;A1&#39;, &#39;CHONG&#39;, &#39;RAUL&#39;, &#39;RFC@ABC.COM&#39;, &#39;TORONTO&#39;, &#39;CA&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Multiple entries:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;INSERT INTO AUTHOR
    (AUTHOR_ID, LASTNAME, FIRSTNAME, EMAIL, CITY, COUNTRY)
    VALUES
    (&#39;A1&#39;, &#39;CHONG&#39;, &#39;RAUL&#39;, &#39;RFC@ABC.COM&#39;, &#39;TORONTO&#39;, &#39;CA&#39;),
    (&#39;A2&#39;, &#39;DHONG&#39;, &#39;BAUL&#39;, &#39;BFD@ABC.COM&#39;, &#39;TORONTO&#39;, &#39;CA&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;update-statement&#34;&gt;Update Statement:&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;alter the data&lt;/li&gt;
&lt;li&gt;DML Statement&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;syntax-5&#34;&gt;Syntax:&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;UPDATE tablename
    SET columnname = value
    WHERE condition
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;example-4&#34;&gt;Example:&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;UPDATE AUTHOR
    SET LASTNAME = NAJEEB
        FIRSTNAME = SUHAIL
    WHERE AUTHOR_ID = 2
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;delete-statement&#34;&gt;Delete Statement:&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Remove rows from the Table&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;syntax-6&#34;&gt;Syntax:&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;DELETE FROM tablename
    WHERE condition
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;examples-3&#34;&gt;Examples:&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;DELETE FROM AUTHOR
    WHERE AUTHOR_ID IN(&#39;A2&#39;,&#39;A3&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;You can find some relevant SQL queries 
&lt;a href=&#34;https://github.com/suhailnajeeb/learning-sql/blob/master/problems/problemset_1.sql&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://suhailnajeeb.github.io/post/sql-fundamentals-part-2&#34;&gt;Link&lt;/a&gt; to &lt;strong&gt;Part 2&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://suhailnajeeb.github.io/post/sql-fundamentals-part-3&#34;&gt;Link&lt;/a&gt; to &lt;strong&gt;Part 2&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;To be continued ..&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
